{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","className","Form","autocomplete","Group","as","Row","controlId","Label","column","sm","Col","Control","type","min","placeholder","value","selected","Button","variant","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oSA+EeA,MAzEf,WACE,OACE,yBAAKC,UAAU,QACb,4BAAQA,UAAU,IAChB,yBAAKA,UAAU,oBACb,uBAAGA,UAAU,SAAQ,gEAGzB,yBAAKA,UAAU,mCACb,kBAACC,EAAA,EAAD,CAAMC,aAAa,OACjB,kBAACD,EAAA,EAAKE,MAAN,CAAYC,GAAIC,IAAKC,UAAU,uBAC7B,kBAACL,EAAA,EAAKM,MAAN,CAAYC,QAAM,EAACC,GAAI,GAAvB,UAGA,kBAACC,EAAA,EAAD,CAAKD,GAAI,GACP,kBAACR,EAAA,EAAKU,QAAN,CAAcC,KAAK,SAASC,IAAI,IAAIC,YAAY,aAGpD,kBAACb,EAAA,EAAKE,MAAN,CAAYC,GAAIC,IAAKC,UAAU,uBAC7B,kBAACL,EAAA,EAAKM,MAAN,CAAYC,QAAM,EAACC,GAAI,GAAvB,UAGA,kBAACC,EAAA,EAAD,CAAKD,GAAI,GACP,kBAACR,EAAA,EAAKU,QAAN,CAAcC,KAAK,SAASC,IAAI,IAAIC,YAAY,aAGpD,kBAACb,EAAA,EAAKE,MAAN,CAAYC,GAAIC,IAAKC,UAAU,uBAC7B,kBAACL,EAAA,EAAKM,MAAN,CAAYC,QAAM,EAACC,GAAI,GAAvB,OAGA,kBAACC,EAAA,EAAD,CAAKD,GAAI,GACP,kBAACR,EAAA,EAAKU,QAAN,CAAcC,KAAK,SAASC,IAAI,IAAIC,YAAY,UAGpD,kBAACb,EAAA,EAAKE,MAAN,CAAYC,GAAIC,IAAKC,UAAU,uBAC7B,kBAACL,EAAA,EAAKM,MAAN,CAAYC,QAAM,EAACC,GAAI,GAAvB,UAGA,kBAACC,EAAA,EAAD,CAAKD,GAAI,GACP,gCACE,4BAAQM,MAAM,QAAd,QACA,4BAAQC,UAAQ,EAACD,MAAM,UAAvB,UACA,4BAAQA,MAAM,kBAAd,qBAIN,kBAACd,EAAA,EAAKE,MAAN,CAAYC,GAAIC,IAAKC,UAAU,uBAC7B,kBAACL,EAAA,EAAKM,MAAN,CAAYC,QAAM,EAACC,GAAI,GAAvB,QAGA,kBAACC,EAAA,EAAD,CAAKD,GAAI,GACT,gCACI,4BAAQO,UAAQ,EAACD,MAAM,cAAvB,cACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,WAAd,cAIN,kBAACE,EAAA,EAAD,CAAQjB,UAAU,OAAMkB,QAAQ,UAAUN,KAAK,UAA/C,iBAIA,kBAACK,EAAA,EAAD,CAAQjB,UAAU,OAAOkB,QAAQ,UAAUN,KAAK,UAAhD,wBC1DUO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.649c687a.chunk.js","sourcesContent":["import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport { Button, Form, Row, Col } from 'react-bootstrap';\n// import { Table } from 'react-bootstrap';\n\nfunction App() {\n  return (\n    <div className=\"mb-5\">\n      <header className=\"\">\n        <div className=\"topnav my-3 mx-3\">\n          <a className=\"title\"><strong>BMI and Energy Calculator</strong></a>\n        </div>\n      </header>\n      <div className=\"mx-3 col-sm-6 col-md-6 col-lg-8\">\n        <Form autocomplete=\"off\">\n          <Form.Group as={Row} controlId=\"formHorizontalEmail\">\n            <Form.Label column sm={2}>\n              Height\n            </Form.Label>\n            <Col sm={4}>\n              <Form.Control type=\"number\" min=\"0\" placeholder=\"Height\" />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} controlId=\"formHorizontalEmail\">\n            <Form.Label column sm={2}>\n              Weight\n            </Form.Label>\n            <Col sm={4}>\n              <Form.Control type=\"number\" min=\"0\" placeholder=\"Weight\" />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} controlId=\"formHorizontalEmail\">\n            <Form.Label column sm={2}>\n              Age\n            </Form.Label>\n            <Col sm={4}>\n              <Form.Control type=\"number\" min=\"0\" placeholder=\"Age\" />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} controlId=\"formHorizontalEmail\">\n            <Form.Label column sm={2}>\n              Gender\n            </Form.Label>\n            <Col sm={4}>\n              <select>\n                <option value=\"Male\">Male</option>\n                <option selected value=\"Female\">Female</option>\n                <option value=\"rather not say\">Rather not say</option>\n              </select>\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} controlId=\"formHorizontalEmail\">\n            <Form.Label column sm={2}>\n              Race\n            </Form.Label>\n            <Col sm={4}>\n            <select>\n                <option selected value=\"Australoid\">Australoid</option>\n                <option value=\"Caucasiod\">Caucasiod</option>\n                <option value=\"Capoid\">Capoid</option>\n                <option value=\"Mongoloid\">Mongoloid</option>\n                <option value=\"Negroid\">Negroid</option>\n              </select>\n            </Col>\n          </Form.Group>\n          <Button className=\"mr-2\"variant=\"primary\" type=\"submit\">\n            Calculate BMI\n          </Button>\n          {/* <br></br> */}\n          <Button className=\"my-2\" variant=\"success\" type=\"submit\">\n            Calculate Energy\n          </Button>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}